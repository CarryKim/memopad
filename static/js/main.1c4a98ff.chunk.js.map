{"version":3,"sources":["MemoList.js","MemoDetail.js","App.js","serviceWorker.js","index.js"],"names":["MemoList","handleSelectRow","_this$props","_this","props","row","onSelectRow","handleRemove","_this$props2","onRemove","objectID","react_default","a","createElement","this","onClick","title","author","wdate","toLocaleDateString","React","Component","MemoDetail","handleSubmit","e","preventDefault","selectedMemo","data","value","contents","onSaveData","nextProps","nextState","_this2","id","onSubmit","placeholder","name","ref","node","type","memolist","Date","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSaveData","setState","state","map","objectSpread","concat","filter","_this$state","cu","src_MemoDetail","border","align","width","src_MemoList","key","onSelectAdd","handleAdd","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c4a98ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass MemoList extends React.Component {\r\n\r\n  //메모선택\r\n  handleSelectRow = () => {\r\n      const { row, onSelectRow } = this.props;\r\n      onSelectRow(row);\r\n  }\r\n\r\n  //메모삭제\r\n  handleRemove = () =>{\r\n      const { row, onRemove} = this.props;\r\n      onRemove(row.objectID);\r\n  }\r\n\r\n    //화면 생성\r\n    render(){\r\n      return (\r\n        <tr>\r\n          <td>{this.props.row.objectID}</td>\r\n          <td><a onClick={this.handleSelectRow}>{this.props.row.title}</a></td>\r\n          <td>{this.props.row.author}</td>\r\n          <td>{this.props.row.wdate.toLocaleDateString('ko-KR')}</td>\r\n          <td><button onClick={this.handleRemove}>삭제</button></td>\r\n        </tr> \r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  export default MemoList;","import React, { Component } from 'react';\r\n\r\nclass MemoDetail extends React.Component {\r\n \r\n    shouldComponentUpdate(nextProps, nextState){\r\n        let selectedMemo = nextProps.selectedMemo;\r\n        if(!selectedMemo.objectID){\r\n            this.title.value = \"\";\r\n            this.author.value = \"\";\r\n            this.contents.value = \"\";\r\n            return true;\r\n        }\r\n\r\n        this.title.value = selectedMemo.title;\r\n        this.author.value = selectedMemo.author;\r\n        this.contents.value = selectedMemo.contents;\r\n        return true;\r\n    }\r\n\r\n    //저장\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let selectedMemo = this.props.selectedMemo;\r\n        let data = {\r\n            title: this.title.value,\r\n            author: this.author.value,\r\n            contents: this.contents.value\r\n        }\r\n        if(selectedMemo.objectID){\r\n            data.objectID = selectedMemo.objectID\r\n            data.wdate = selectedMemo.wdate\r\n        }\r\n        this.props.onSaveData(data);\r\n    }\r\n\r\n    render(){\r\n        const { id, selectedMemo } = this.props;\r\n            return (\r\n                <div>\r\n                    <span>메모 상세 화면</span>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <input placeholder=\"제목\" name=\"title\"  ref={node => this.title = node} />\r\n                        <input placeholder=\"작성자\" name=\"author\"  ref={node => this.author = node}/>\r\n                        <input placeholder=\"내용\" name=\"contents\"  ref={node => this.contents = node}/>\r\n                        <button type=\"submit\">추가/수정</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default MemoDetail;","import React, { Component } from 'react';\nimport MemoList from './MemoList';\nimport MemoDetail from './MemoDetail';\n\nconst memolist = [\n  {\n    objectID: 1,\n    title: '구글 스터디잼 클라우드',\n    author: 'minji',\n    contents: '퀵랩쿠폰등록',\n    wdate: new Date('2019-05-15')\n  },\n  {\n    objectID: 2,\n    title: '구글 스터디잼 클라우드',\n    author: 'minji',\n    contents: '코세라쿠폰등록',\n    wdate: new Date('2019-05-16')\n  },\n  {\n    objectID: 3,\n    title: '구글 스터디잼 클라우드',\n    author: 'minji',\n    contents: '쿠버네이트엔진 강의듣기',\n    wdate: new Date('2019-05-17')\n  }    \n];\n\nclass App extends React.Component {\n  //생성자\n  constructor(props){\n    super(props);\n\n    this.state = {\n      id: 4,\n      memolist,\n      selectedMemo:{}\n    };\n  }\n\n  //메모저장(추가, 수정)\n  handleSaveData = (data) => {\n    //메모추가\n    if(!data.objectID){\n      this.setState({\n        id: this.state.id+1,\n        memolist: this.state.memolist.concat({objectID: this.state.id, wdate: new Date(), ...data }),\n\n        selectedMemo:{}\n      }); \n    } else { \n      //메모수정\n      this.setState({\n        memolist: this.state.memolist.map(row => data.objectID === row.objectID ? {...data }: row),\n        selectedMemo: {}\n      })\n    }\n  }\n\n  //메모삭제\n  handleRemove = (objectID) => {\n    this.setState({\n      memolist: this.state.memolist.filter(row => row.objectID !== objectID)\n  })    \n  }\n\n  //선택메모 상세조회\n  handleSelectRow = (row) => {\n    this.setState({selectedMemo:row});\n  }\n\n  render(){\n      const { id, memolist, selectedMemo, cu} = this.state;\n      return (\n        <div>\n          <MemoDetail id={id} cu={cu} selectedMemo={selectedMemo} onSaveData={this.handleSaveData} />\n          <span>메모 리스트 화면</span>\n          <table border=\"1\">\n            <tbody>\n            <tr align=\"center\">  \n              <td width=\"50\">ID</td>\n              <td width=\"300\">Title</td>\n              <td width=\"100\">Name</td>\n              <td width=\"100\">Date</td>\n            </tr>\n            {\n              memolist.map(row => \n                (<MemoList key={row.objectID} row={row} onRemove={this.handleRemove} onSelectRow={this.handleSelectRow} onSelectAdd={this.handleAdd} />)\n              )\n            }\n            </tbody>\n          </table>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}